set number
set ruler
syntax on

filetype off     " required by vundle

let mapleader=' '
nnoremap ; :

" Bundles {
  set rtp+=~/.vim/bundle/vundle/
  call vundle#rc()

  Bundle 'gmarik/vundle'
  Bundle 'wincent/Command-T'
  Bundle "ervandew/supertab"
  Bundle 'SirVer/ultisnips'
  Bundle "altercation/vim-colors-solarized"
  Bundle 'IndexedSearch'
  Bundle 'scrooloose/syntastic'
  Bundle "sjl/gundo.vim"
  Bundle "vim-scripts/YankRing.vim"
  Bundle 'mileszs/ack.vim'
  Bundle 'matchit.zip'

  Bundle 'textobj-user'
  Bundle 'textobj-rubyblock'
  Bundle 'lucapette/vim-textobj-underscore'
  Bundle 'vim-indent-object'

  Bundle 'terryma/vim-multiple-cursors'
  Bundle 'bitc/vim-bad-whitespace'
  Bundle 'henrik/vim-qargs'
  Bundle 'joshuabates/vim-execrus'
  Bundle 'benmills/vimux'
  Bundle 'christoomey/vim-tmux-navigator'

  Bundle 'vim-ruby/vim-ruby'
  Bundle 'vim-scripts/blockle.vim'
  Bundle 'tpope/vim-rails'
  Bundle 'tpope/vim-rake'
  Bundle 'tpope/vim-bundler'
  Bundle "tpope/vim-cucumber"
  Bundle "tpope/vim-endwise"
  Bundle 'tpope/vim-haml'

  Bundle 'tpope/vim-commentary'
  Bundle 'tpope/vim-surround'
  Bundle 'tpope/vim-fugitive'
  Bundle "tpope/vim-unimpaired"

  Bundle 'pangloss/vim-javascript'
  Bundle 'kchmck/vim-coffee-script'

  filetype plugin indent on  " Automatically detect file types. (must turn on after Vundle)
" }

  nnoremap <leader><leader> <c-^>

  let g:CommandTTagIncludeFilenames=1
  let g:CommandTMaxHeight=20
  nnoremap <leader>t :CommandT<cr>
  " nnoremap <leader>] :CommandTTag<cr>
  " nnoremap <leader>j :CommandTJump<cr><cr>
" }

" Looks {
  color solarized
  set background=dark
  set winwidth=84
  set showmode                  " display the current mode
  set cursorline " highlight current line
  set cursorcolumn " highlight current line
  hi cursorline ctermbg=black " highlight bg color of current line
  hi CursorColumn ctermbg=black " highlight cursor
  nnoremap <Leader>c :set cursorline! cursorcolumn!<CR>
" }

let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=1

" Open undo tree buffer
nnoremap <Leader>u :GundoToggle<CR>
" Open Show yank ring buffer
nnoremap <Leader>y :YRShow<CR>
set clipboard=unnamed

" Commentary {
nmap <leader>/ <plug>CommentaryLine<CR>
vmap <leader>/ <plug>Commentary<CR>

" Utilsnips {
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsJumpForwardTrigger="<tab>"
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
  let g:UltiSnipsDontReverseSearchPath="1" " Allows removing unwanted snippets when using Vundle
"  }

" Fugitve {
  nmap <leader>gb :Gblame<CR>
  nmap <leader>gs :Gstatus<CR>
  nmap <leader>gd :Gdiff<CR>
  nmap <leader>gl :Glog<CR>
  nmap <leader>gc :Gcommit<CR>
  nmap <leader>gp :Git push<CR>
" }

" Rails.vim {
  nnoremap <leader>a :A<CR>  " Go to alternate file
" }

" Ruby {
  " Alternate between do; end and { } blocks in ruby
  let g:blockle_mapping = '<Leader>{'
  autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
  autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
  autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
  autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
" }

augroup filetypedetect
  au! BufRead,BufNewFile *_spec.rb    set filetype=rspec.ruby
augroup END

" CTags
" Retag all files in project
map <Leader>rt :!ctags --extra=+f -R *<CR><CR>
map <C-\> :tnext<CR>

au BufWritePost *.rb silent! !ctags --extra=+f -R &
" au BufWritePost *.coffee silent! !ctags --extra=+f -R &
" au BufWritePost *.js silent! !ctags --extra=+f -R &

" JavaScript {
  vmap <leader>C <esc>:'<,'>:CoffeeCompile vert<CR>
  map <leader>C :CoffeeCompile vert<CR>
  command! -nargs=1 C CoffeeCompile | :<args>
  au BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable
" }

function! ExecrusTmux(...)
  let lane = "default"

  if a:0 > 0
    let lane = a:000[0]
  end

  call system('tmux select-pane -t :.+')
  call system('tmux send-keys "clear" "Enter"')
  call system('tmux last-pane')
  call g:Execrus(lane)
endfunction

map <C-e> :call ExecrusTmux()<CR>
map <Leader>e :call ExecrusTmux('alternative')<CR>
map <Leader>l :VimuxRunLastCommand<CR>

let g:execrus_runner='vimux'
let g:VimuxOrientation = "h"
let VimuxUseNearestPane = 1

" MatchIt
" % to bounce from do to end etc.
runtime! macros/matchit.vim

" Set encoding
set encoding=utf-8

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Searching
set gdefault
set hlsearch
set incsearch
set showmatch
set ignorecase
set smartcase
nnoremap N Nzz
nnoremap n nzz

" move the current line up and down
" nnoremap <leader>J      :m+<CR>==
" nnoremap <leader>J      :m-2<CR>==

" Tab completion
set wildmode=list:longest,list:full
" set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Status bar
set laststatus=2

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Capfile,Guardfile,Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

au BufRead,BufNewFile *.conf set ft=nginx

" Get hamlc templates to syntax highlight (ghetto)
au BufRead,BufNewFile *.hamlc set ft=haml

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Use modeline overrides
set modeline
set modelines=10

" set winminheight=0
" set winheight=999

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" Autoreload when .vimrc files change
augroup myvimrc
  au!
  au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

" Exit insert mode with jk
inoremap jk <esc>
" inoremap <esc> <nop>
nmap <leader>w :w<cr>
map <F1> <nop>

" Jumpstack navigation
" nnoremap <leader>] <C-o>
" nnoremap <leader>[ <C-i>

" When on, the ":substitute" flag 'g' is default on.  This means that
" all matches in a line are substituted instead of one.
set gdefault
" When a bracket is inserted, briefly jump to the matching one.  The
" jump is only done if the match can be seen on the screen.  The time to
" show the match can be set with 'matchtime'.
set showmatch

"This unsets the "last search pattern" register by hitting return
nnoremap <CR> :noh<CR><CR>

nmap <Leader>n /<C-r><C-w><cr>
nmap <Leader>f :Ack <C-r><C-w><cr>
nmap <Leader>r :%s/<C-r><C-w>//gc<Left><Left><Left>
nmap <Leader>R :Qdo %s/<C-r><C-w>//gc | update<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>

nmap <leader>j :cn<CR>
nmap <leader>k :cp<CR>
nmap <leader>J :cN<CR>
nmap <leader>H :cP<CR>

fu! CloseQuickFixOrBuffer()
    for i in range(1, winnr('$'))
        let bnum = winbufnr(i)
        if getbufvar(bnum, '&buftype') == 'quickfix'
            cclose
            return
        endif
    endfor
    :q
endfunction
nmap <Leader>c :call CloseQuickFixOrBuffer()<cr>

" Add extra block object mods (eg ci/ )
let pairs = [ ".", ":", ",", ";", "<bar>", "/", "<bslash>", "*", "( )", "{ }", "< >"]
for keychars in pairs
  let keys = map(split(keychars), "substitute(v:val, '^\s*\(.\{-}\)\s*$', '\1', '')")
  let key = keys[0]
  let ekey = key

  if len(keys) > 1
    let ekey = keys[1]
  endif

  execute "nnoremap ci".key." f".ekey."cT".key
  execute "nnoremap di".key." f".ekey."dT".key
  execute "nnoremap yi".key." f".ekey."yT".key
  execute "nnoremap vi".key." f".ekey."vT".key
  execute "nnoremap ca".key." f".ekey."lcF".key
  execute "nnoremap da".key." f".ekey."ldF".key
  execute "nnoremap ya".key." f".ekey."lyF".key
  execute "nnoremap va".key." f".ekey."lvF".key
endfor
